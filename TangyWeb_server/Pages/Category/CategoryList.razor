@page "/category"
@inject ICategoryRepository _categoryrepo
<div class="row">
    <div class="col-6 ">
        <h4 class="text-primary">Category List</h4>
    </div>
    <div class="col-4 offset-2">
        <a href="/category/create" class="btn btn-primary float-end @addCategoryDisabled">Add to Category</a>
    </div>
</div>
@if(deleteClicked){
    <_DeleteConfirmation categoryDTO="@categoryDTO" onDeleteClick="DeleteHandle"></_DeleteConfirmation>
}
<div class="row mt-2 p-3 border border-1 rounded-2 border-secondary">
    @if (categoryDTOs.Any())
    {
        <table class="table table-bordered">
            <thead>
                <tr>
                    <th>
                        Category Name
                    </th>
                    <th>
                        Action
                    </th>
                </tr>
            </thead>
            <tbody>
                @foreach (var category in categoryDTOs)
                {
                    <tr>
                        <td>
                            @category.Name
                        </td>
                        <td>
                            <NavLink class="btn btn-primary" href="@($"/category/edit/{category.Id}")">Edit</NavLink>
                        </td>
                        <td>
                            <button class="btn btn-danger" @onclick="()=>ToggleDelete(category)">Delete</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
    else
    {
        if (!isLoaded)
        {
            <div class="loadingGif col-6 offset-5">
                <img src="Hourglass.gif"/>
            </div>
        }
        else
        {
            <p>Nothing to Show....</p>
        }
    }
</div>

@code {
    private IEnumerable<CategoryDTO> categoryDTOs { get; set; } = new List<CategoryDTO>();
    private bool isLoaded { get; set; } = false;
    private bool deleteClicked { get; set; } = false;
    private CategoryDTO categoryDTO { get; set; } = new CategoryDTO();
    private string addCategoryDisabled { get; set; } = "disabled";


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadCategories();
        }
    }
    private async Task LoadCategories()
    {
        categoryDTOs = await _categoryrepo.GetAll();
        isLoaded = true;
        addCategoryDisabled = "";
        StateHasChanged();
    }
    private void ToggleDelete(CategoryDTO categoryDTO)
    {
        deleteClicked = true;
        this.categoryDTO = categoryDTO;
    }

    private async Task DeleteHandle(bool confirmDelete)
    {
        if (confirmDelete)
        {
            isLoaded = false;
            await _categoryrepo.Delete(categoryDTO.Id);
            deleteClicked = false;
            await LoadCategories();
            isLoaded = true;

        }
        else
        {
            deleteClicked = false;
        }
    }
}
